plugins {
	id 'fabric-loom' version '1.8-SNAPSHOT'
	id 'maven-publish'
	id "io.freefair.lombok" version "8.4"
}

version = "${project.minecraft_version}-${project.mod_version}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

Properties additionalProperties = new Properties()
if (file("extra.properties").exists()) {
	additionalProperties.load(file("extra.properties").newReader())
}

repositories {
	mavenCentral()
	maven { url 'https://masa.dy.fi/maven' }
	maven { url 'https://maven.terraformersmc.com/releases/' }
	maven { url 'https://jitpack.io' }
	maven { url 'https://maven.wispforest.io' }
	maven { url 'https://repo.fabim.de/repository/maven-public/' }
}


dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
	modImplementation "fi.dy.masa.malilib:malilib-fabric-${project.minecraft_version}:${project.malilib_version}"
	modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"

	implementation "com.github.DarkKronicle.Konstruct:addons:${project.konstruct_version}"
	implementation "com.github.DarkKronicle.Konstruct:core:${project.konstruct_version}"

	implementation 'com.electronwill.night-config:toml:3.6.7'
	// Transitive
	include 'com.electronwill.night-config:toml:3.6.7'
	include 'com.electronwill.night-config:core:3.6.7'


	include "com.github.DarkKronicle.Konstruct:addons:${project.konstruct_version}"
	include "com.github.DarkKronicle.Konstruct:core:${project.konstruct_version}"

	implementation "org.mariuszgromada.math:MathParser.org-mXparser:${project.mxparser_version}"
	include "org.mariuszgromada.math:MathParser.org-mXparser:${project.mxparser_version}"

	implementation "io.github.maowimpl:owo:${project.owo_version}"
	include "io.github.maowimpl:owo:${project.owo_version}"

	implementation 'org.apache.commons:commons-csv:1.10.0'
	include 'org.apache.commons:commons-csv:1.10.0'

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

tasks.register('downloadExtra') {
	def f = new File('./src/main/resources/swear_words.csv')
	if (!f.exists()) {
		new URL('https://raw.githubusercontent.com/surge-ai/profanity/main/profanity_en.csv').withInputStream { i -> f.withOutputStream { it << i } }
	}
}

assemble {
	dependsOn 'downloadExtra'
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
		maven {
			name = "fabimRepo"
			url = uri("https://repo.fabim.de/repository/maven-mixed/")
			credentials(PasswordCredentials.class)
		}
	}
}
